{
  "Nakiswen/react": {
    "name": "react",
    "contributor": "@facebook",
    "contributionPercentage": 85,
    "lastUpdated": "2024-03-15",
    "description": "A declarative, efficient, and flexible JavaScript library for building user interfaces.",
    "version": "18.2.0",
    "dependencies": ["loose-envify", "scheduler", "prop-types"],
    "codeSnippet": "import React, { useState } from 'react';\n\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default ExampleComponent;"
  },
  "vue": {
    "name": "vue",
    "contributor": "@vuejs",
    "contributionPercentage": 75,
    "lastUpdated": "2024-03-14",
    "description": "Vue.js is a progressive, incrementally-adoptable JavaScript framework for building UI on the web.",
    "version": "3.3.4",
    "dependencies": ["@vue/reactivity", "@vue/runtime-core", "@vue/shared"],
    "codeSnippet": "<template>\n  <div>\n    <p>You clicked {{ count }} times</p>\n    <button @click=\"count++\">Click me</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>"
  },
  "lodash": {
    "name": "lodash",
    "contributor": "@lodash",
    "contributionPercentage": 65,
    "lastUpdated": "2024-03-10",
    "description": "A modern JavaScript utility library delivering modularity, performance, & extras.",
    "version": "4.17.21",
    "dependencies": [],
    "codeSnippet": "import _ from 'lodash';\n\n// Array manipulation\nconst array = [1, 2, 3, 4];\nconst evens = _.filter(array, n => n % 2 === 0);\n\n// Object manipulation\nconst object = { 'a': 1, 'b': 2, 'c': 3 };\nconst values = _.values(object);\n\n// Function utilities\nconst debounced = _.debounce(() => console.log('Debounced!'), 300);"
  },
  "axios": {
    "name": "axios",
    "contributor": "@axios",
    "contributionPercentage": 55,
    "lastUpdated": "2024-03-08",
    "description": "Promise based HTTP client for the browser and node.js",
    "version": "1.4.0",
    "dependencies": ["follow-redirects", "form-data", "proxy-from-env"],
    "codeSnippet": "import axios from 'axios';\n\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  });"
  },
  "canvas-confetti": {
    "name": "canvas-confetti",
    "contributor": "@catdad",
    "contributionPercentage": 92,
    "lastUpdated": "2024-04-05",
    "description": "A lightweight confetti library for generating celebration animations on Canvas",
    "version": "1.6.0",
    "dependencies": [],
    "codeSnippet": "import confetti from 'canvas-confetti';\n\n// Basic usage\nconfetti();\n\n// Custom parameters\nconfetti({\n  particleCount: 150,\n  spread: 180,\n  origin: { y: 0.6 },\n  colors: ['#ff0000', '#00ff00', '#0000ff'],\n});\n\n// Create fireworks effect\nfunction fireworks() {\n  const duration = 5 * 1000;\n  const animationEnd = Date.now() + duration;\n  const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\n\n  function randomInRange(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  const interval = setInterval(function() {\n    const timeLeft = animationEnd - Date.now();\n\n    if (timeLeft <= 0) {\n      return clearInterval(interval);\n    }\n\n    const particleCount = 50 * (timeLeft / duration);\n    \n    confetti(Object.assign({}, defaults, {\n      particleCount,\n      origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }\n    }));\n    confetti(Object.assign({}, defaults, {\n      particleCount,\n      origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }\n    }));\n  }, 250);\n}"
  },
  "tailwindcss": {
    "name": "tailwindcss",
    "contributor": "@adamwathan",
    "contributionPercentage": 88,
    "lastUpdated": "2024-03-28",
    "description": "A utility-first CSS framework for rapidly building modern websites",
    "version": "3.3.2",
    "dependencies": ["postcss", "autoprefixer", "cssnano"],
    "codeSnippet": "// tailwind.config.js\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx}',\n    './src/components/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n        },\n      },\n      fontFamily: {\n        sans: ['Inter', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n};"
  },
  "web3": {
    "name": "web3",
    "contributor": "@web3js",
    "contributionPercentage": 75,
    "lastUpdated": "2024-04-10",
    "description": "JavaScript API for interacting with the Ethereum blockchain",
    "version": "1.9.0",
    "dependencies": ["ethereum-cryptography", "web3-utils", "web3-core"],
    "codeSnippet": "import Web3 from 'web3';\n\n// Connect to Ethereum network\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_KEY');\n\n// Get current block number\nconst getBlockNumber = async () => {\n  try {\n    const blockNumber = await web3.eth.getBlockNumber();\n    console.log(`Current block number: ${blockNumber}`);\n    return blockNumber;\n  } catch (error) {\n    console.error('Failed to get block number:', error);\n    throw error;\n  }\n};\n\n// Create and send transaction\nconst sendTransaction = async (fromAddress, toAddress, amount, privateKey) => {\n  try {\n    // Create transaction object\n    const tx = {\n      from: fromAddress,\n      to: toAddress,\n      value: web3.utils.toWei(amount, 'ether'),\n      gas: 21000,\n      gasPrice: await web3.eth.getGasPrice()\n    };\n    \n    // Sign transaction\n    const signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n    \n    // Send transaction\n    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n    console.log(`Transaction confirmed, transaction hash: ${receipt.transactionHash}`);\n    return receipt;\n  } catch (error) {\n    console.error('Failed to send transaction:', error);\n    throw error;\n  }\n};"
  },
  "better-auth": {
    "name": "better-auth",
    "contributor": "@authjs",
    "contributionPercentage": 80,
    "lastUpdated": "2024-02-15",
    "description": "Authentication and authorization library for modern web applications, supporting multiple identity providers",
    "version": "4.2.1",
    "dependencies": ["jose", "oauth", "cookies-next"],
    "codeSnippet": "import { BetterAuth } from 'better-auth';\n\n// Initialize authentication instance\nconst auth = new BetterAuth({\n  providers: [\n    // GitHub OAuth provider\n    {\n      id: 'github',\n      name: 'GitHub',\n      type: 'oauth',\n      clientId: process.env.GITHUB_CLIENT_ID,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET,\n      authorization: { params: { scope: 'read:user user:email' } },\n    },\n    // Google OAuth provider\n    {\n      id: 'google',\n      name: 'Google',\n      type: 'oauth',\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      authorization: { params: { scope: 'openid email profile' } },\n    },\n  ],\n  callbacks: {\n    // Login callback\n    async jwt({ token, account, profile }) {\n      if (account) {\n        token.accessToken = account.access_token;\n        token.provider = account.provider;\n        token.userId = profile.id;\n      }\n      return token;\n    },\n    // Session callback\n    async session({ session, token }) {\n      session.accessToken = token.accessToken;\n      session.user.id = token.userId;\n      return session;\n    },\n  },\n  debug: process.env.NODE_ENV === 'development',\n});\n\nexport { auth };"
  },
  "fetch-api": {
    "name": "fetch-api",
    "contributor": "@whatwg",
    "contributionPercentage": 95,
    "lastUpdated": "2024-01-22",
    "description": "Modern API interface wrapper for network requests, providing cleaner syntax and more powerful features",
    "version": "2.1.0",
    "dependencies": ["abort-controller", "form-data", "node-fetch"],
    "codeSnippet": "import { createClient } from 'fetch-api';\n\n// Create API client\nconst api = createClient({\n  baseUrl: 'https://api.example.com/v1',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  timeout: 5000, // 5 second timeout\n  retries: 2,    // Auto-retry count on failure\n});\n\n// Define API endpoints\nconst endpoints = {\n  // Get user information\n  getUser: (id) => api.get(`/users/${id}`),\n  \n  // Create new user\n  createUser: (userData) => api.post('/users', { body: userData }),\n  \n  // Update user information\n  updateUser: (id, userData) => api.patch(`/users/${id}`, { body: userData }),\n  \n  // Delete user\n  deleteUser: (id) => api.delete(`/users/${id}`),\n  \n  // File upload\n  uploadAvatar: (id, file) => {\n    const formData = new FormData();\n    formData.append('avatar', file);\n    return api.post(`/users/${id}/avatar`, {\n      body: formData,\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n};\n\n// Usage example\nasync function fetchUserData(userId) {\n  try {\n    const user = await endpoints.getUser(userId);\n    console.log('User information retrieved:', user);\n    return user;\n  } catch (error) {\n    if (error.status === 404) {\n      console.error('User does not exist');\n    } else {\n      console.error('Failed to get user information:', error);\n    }\n    throw error;\n  }\n}"
  }
} 